# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску, как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24,
вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28  в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
###########################################
network = input('Enter network and mask: ')
ip = (network.split('/')[0]).split('.')
###########################################
mask = int(network.split('/')[1])
mask_bin = '1' * mask + '0' * (32 - mask)
mask_bin_separated = [int(mask_bin[0:8], 2), int(mask_bin[8:16], 2), int(mask_bin[16:24], 2), int(mask_bin[24:32], 2)]

mask_bin_separated_dict = """
Mask:
/{1}
{0[0]:<8}  {0[1]:<8}  {0[2]:<8}  {0[3]:<8}
{0[0]:08b}  {0[1]:08b}  {0[2]:08b}  {0[3]:08b}
"""
############################################
ip = list(map(int, ip))
ip_bin = "{0[0]:08b}  {0[1]:08b}  {0[2]:08b}  {0[3]:08b}"
ip_bin_list = ''.join(((ip_bin.format(ip)).split())[0::])

ip_bits = ip_bin_list[0:(mask)] + '0' * (32 - mask)
ip_bits = [int(ip_bits[0:8], 2), int(ip_bits[8:16], 2), int(ip_bits[16:24], 2), int(ip_bits[24:32], 2)]

ip_final = """
Network:
{0[0]:<8}  {0[1]:<8}  {0[2]:<8}  {0[3]:<8}
{0[0]:08b}  {0[1]:08b}  {0[2]:08b}  {0[3]:08b}
"""
############################################
print(ip_final.format(ip_bits))
print(mask_bin_separated_dict.format(mask_bin_separated, mask))
